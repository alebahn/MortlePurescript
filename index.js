// Generated by purs bundle 0.13.6
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                       
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();                                                   
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["index"] = index;
  exports["mapWithIndex"] = mapWithIndex;
  exports["length"] = $foreign.length;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  };                                       
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["notEq"] = notEq;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["monadEffect"] = monadEffect;
  exports["foreachE"] = $foreign.foreachE;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Canceler = function (x) {
      return x;
  };                                                                   
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $43 = Data_Functor["void"](Effect.functorEffect);
      return function ($44) {
          return $43(launchAff($44));
      };
  })();
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var effectCanceler = (function () {
      var $45 = Effect_Class.liftEffect(monadEffectAff);
      return function ($46) {
          return Canceler(Data_Function["const"]($45($46)));
      };
  })();
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff_"] = launchAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["effectCanceler"] = effectCanceler;
  exports["bindAff"] = bindAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $30 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($31) {
          return $30(Effect_Console.log($31));
      };
  };
  exports["log"] = log;
})(PS);
(function(exports) {
  "use strict"

  exports.setCanvasBackgroundURL = function (canvasElement) {
    return function (url) {
      return function () {
        canvasElement.style.background = "url(" + url + ")";
      }
    }
  }
})(PS["Game"] = PS["Game"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.canvasToDataURL = function(canvas) {
      return function() {
          return canvas.toDataURL();
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.strokeRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.strokeRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.setFont = function(ctx) {
      return function(fontspec) {
          return function() {
              ctx.font = fontspec;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                  };
              };
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var getCanvasDimensions = function (ce) {
      return function __do() {
          var w = $foreign.getCanvasWidth(ce)();
          var h = $foreign.getCanvasHeight(ce)();
          return {
              width: w,
              height: h
          };
      };
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["getCanvasDimensions"] = getCanvasDimensions;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["canvasToDataURL"] = $foreign.canvasToDataURL;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["fillRect"] = $foreign.fillRect;
  exports["strokeRect"] = $foreign.strokeRect;
  exports["clearRect"] = $foreign.clearRect;
  exports["setFont"] = $foreign.setFont;
  exports["fillText"] = $foreign.fillText;
})(PS);
(function(exports) {
  "use strict";

  // module Math

  exports.abs = Math.abs;  

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports.round = Math.round;

  exports.sin = Math.sin;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["cos"] = $foreign.cos;
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
  exports["pi"] = $foreign.pi;
})(PS);
(function(exports) {
  // module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };

  exports.merge = function(sig1) {
    return function(sig2) {
      var out = make(sig1.get());
      sig2.subscribe(out.set);
      sig1.subscribe(out.set);
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };

  exports.filter = function(fn) {
    return function(seed) {
      return function(sig) {
        var out = make(fn(sig.get()) ? sig.get() : seed);
        sig.subscribe(function(val) { if (fn(val)) out.set(val); });
        return out;
      };
    };
  };
})(PS["Signal"] = PS["Signal"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Signal"] = $PS["Signal"] || {};
  var exports = $PS["Signal"];
  var $foreign = $PS["Signal"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var flippedMap = function (dictFunctor) {
      return Data_Function.flip(Data_Functor.map(dictFunctor));
  };
  exports["flippedMap"] = flippedMap;
  exports["functorSignal"] = functorSignal;
  exports["constant"] = $foreign.constant;
  exports["merge"] = $foreign.merge;
  exports["foldp"] = $foreign.foldp;
  exports["runSignal"] = $foreign.runSignal;
  exports["filter"] = $foreign.filter;
})(PS);
(function(exports) {
  // module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Signal.Time"] = $PS["Signal.Time"] || {};
  var exports = $PS["Signal.Time"];
  var $foreign = $PS["Signal.Time"];
  exports["now"] = $foreign.now;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Signal.DOM"] = $PS["Signal.DOM"] || {};
  var exports = $PS["Signal.DOM"];
  var $foreign = $PS["Signal.DOM"];
  var Signal = $PS["Signal"];
  var Signal_Time = $PS["Signal.Time"];
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["animationFrame"] = animationFrame;
  exports["keyPressed"] = keyPressed;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game"] = $PS["Game"] || {};
  var exports = $PS["Game"];
  var $foreign = $PS["Game"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var $$Math = $PS["Math"];
  var Signal = $PS["Signal"];
  var Signal_DOM = $PS["Signal.DOM"];                
  var NewGame = (function () {
      function NewGame() {

      };
      NewGame.value = new NewGame();
      return NewGame;
  })();
  var Continue = (function () {
      function Continue() {

      };
      Continue.value = new Continue();
      return Continue;
  })();
  var KeyLeft = (function () {
      function KeyLeft() {

      };
      KeyLeft.value = new KeyLeft();
      return KeyLeft;
  })();
  var KeyRight = (function () {
      function KeyRight() {

      };
      KeyRight.value = new KeyRight();
      return KeyRight;
  })();
  var KeyUp = (function () {
      function KeyUp() {

      };
      KeyUp.value = new KeyUp();
      return KeyUp;
  })();
  var KeyDown = (function () {
      function KeyDown() {

      };
      KeyDown.value = new KeyDown();
      return KeyDown;
  })();
  var KeyOther = (function () {
      function KeyOther() {

      };
      KeyOther.value = new KeyOther();
      return KeyOther;
  })();
  var Frame = (function () {
      function Frame() {

      };
      Frame.value = new Frame();
      return Frame;
  })();
  var Startup = (function () {
      function Startup() {

      };
      Startup.value = new Startup();
      return Startup;
  })();
  var Menu = (function () {
      function Menu() {

      };
      Menu.value = new Menu();
      return Menu;
  })();
  var Aim = (function () {
      function Aim() {

      };
      Aim.value = new Aim();
      return Aim;
  })();
  var Launch = (function () {
      function Launch() {

      };
      Launch.value = new Launch();
      return Launch;
  })();
  var Win = (function () {
      function Win() {

      };
      Win.value = new Win();
      return Win;
  })();
  var saveToBackground = function (game) {
      return function __do() {
          var url = Graphics_Canvas.canvasToDataURL(game.canvasElement)();
          return $foreign.setCanvasBackgroundURL(game.canvasElement)(url)();
      };
  };
  var o = false;
  var makeGame = function (canvasElement) {
      return function (context) {
          return function (width) {
              return function (height) {
                  return {
                      canvasElement: canvasElement,
                      canvasContext: context,
                      width: width,
                      height: height,
                      currentState: Startup.value,
                      nextState: Menu.value,
                      menuOption: NewGame.value,
                      refreshScreen: false,
                      paintScreen: false,
                      currentLevel: -1 | 0,
                      nextLevel: -1 | 0,
                      currentX: 2.0,
                      currentY: 58.0,
                      aimAngle: 0.0,
                      velocityX: 0.0,
                      velocityY: 0.0
                  };
              };
          };
      };
  };
  var i = true;
  var levels = [ [ [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o, o ], [ o, o, o, i, i, i, i, i, i, i, i, i, i, i, i, i, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, i, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, i, o, o, o, o, o, o, o, o, o ] ], [ [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, i, i, i, i, i, o, i, i, i, i, i, i, i, o, i, i ], [ o, o, i, o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o ], [ o, i, i, o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o ] ], [ [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, i, i, i, i, i, o, o, o ], [ o, i, i, o, o, o, o, o, o, o, o, o, i, o, i, o, o, o, o ], [ o, o, i, i, o, o, o, o, o, o, o, o, i, o, i, o, o, o, o ], [ i, o, i, o, i, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, i, o, o, i, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, i, i, o, o, o, i, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, i, o, o, o, o, i, o, o, o, o, o, o, o, o, o, o, o ], [ i, o, i, o, o, o, o, o, i, o, o, o, o, o, o, o, o, o, o ], [ o, o, i, o, o, o, o, o, o, i, o, o, o, o, o, o, o, o, o ], [ o, i, i, o, o, o, o, o, o, o, i, o, o, o, o, o, o, o, o ], [ o, o, i, o, o, o, o, o, o, o, o, i, o, o, o, o, o, o, o ] ], [ [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, i, i, o, i, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, i, i, o, o, o, i, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o, o, o, o ], [ o, o, o, o, o, i, i, o, o, o, o, o, i, o, o, o, o, o, o ], [ o, o, o, o, o, o, i, o, i, o, i, o, i, o, o, o, o, o, o ], [ o, o, o, i, i, o, i, o, i, o, o, o, i, o, o, o, o, o, o ], [ o, o, o, o, o, o, i, i, i, o, i, o, i, o, o, o, o, o, o ], [ o, i, i, o, o, o, i, o, i, o, i, o, i, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o, o, o, o ] ], [ [ o, o, o, o, o, o, o, i, o, o, o, o, o, o, o, o, o, o, o ], [ i, i, i, o, o, o, o, i, o, o, o, o, i, i, o, i, o, o, o ], [ o, o, o, o, o, o, o, i, o, o, o, o, i, o, o, i, o, o, o ], [ o, o, o, i, i, i, o, o, o, o, o, o, i, o, i, i, o, o, o ], [ o, o, o, o, o, i, o, o, o, o, o, o, i, o, o, i, o, o, o ], [ o, i, i, o, o, i, i, i, i, i, i, o, i, i, o, i, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, i, o, i, o, o, i, o, o, o ], [ o, o, o, o, i, i, o, o, o, o, i, o, i, o, i, i, o, o, o ], [ o, o, o, o, i, o, o, o, o, o, i, o, o, o, o, i, o, o, o ], [ o, o, o, o, i, o, i, i, i, o, i, i, i, i, o, i, o, o, o ], [ o, i, o, o, o, o, o, o, o, o, o, o, o, o, o, i, o, i, i ], [ o, i, o, o, i, i, o, o, o, o, o, o, o, o, o, i, o, o, o ] ], [ [ i, i, i, i, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, i, o, i, i, o, o, o, o, o, o, o, o, o, o, o, o ], [ i, i, o, i, o, o, o, o, o, i, i, o, o, o, o, o, o, o, o ], [ o, o, o, i, o, o, o, o, o, i, o, o, o, i, i, o, o, o, o ], [ o, i, i, i, i, i, i, o, o, i, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, i, o, o, i, o, o, o, o, o, o ], [ i, i, i, o, o, o, o, o, o, i, o, o, i, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, i, o, i, o, o, i, o, o, o, o, o, o ], [ o, o, o, i, i, i, i, o, o, i, o, o, o, o, o, i, o, i, i ], [ i, i, o, o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, i, o, o, o ] ], [ [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, i, i, i, i, i, i, i, i, i, i, o ], [ o, o, o, o, o, o, o, i, i, o, o, o, o, o, o, o, o, o, o ], [ o, i, i, i, i, i, i, i, i, o, o, i, i, i, i, i, i, i, i ], [ o, o, o, o, o, o, o, o, i, o, o, i, o, o, o, o, o, o, o ], [ i, o, o, o, o, o, o, i, i, o, o, i, o, o, o, i, o, o, o ], [ i, i, i, i, i, i, o, o, i, o, i, i, i, i, o, i, o, o, o ], [ o, o, o, o, o, i, i, o, i, o, o, i, o, o, o, i, o, o, o ], [ o, o, o, o, o, i, o, o, i, o, o, i, o, i, i, i, o, o, o ], [ o, o, i, i, o, i, o, i, i, o, o, i, o, o, o, i, o, o, o ], [ i, o, i, o, o, o, o, o, i, i, o, i, i, i, o, i, o, o, o ], [ o, o, i, o, o, o, i, o, i, o, o, o, o, o, o, i, o, o, o ] ], [ [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o ], [ o, o, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, o, i ], [ o, o, o, i, o, o, o, o, o, o, o, o, o, o, o, o, i, o, o ], [ i, i, o, i, o, i, i, i, i, i, i, i, i, i, o, o, i, o, o ], [ o, o, o, i, o, i, o, o, o, o, o, o, o, i, i, o, i, i, o ], [ o, i, o, i, o, i, i, o, i, i, i, i, o, i, o, o, o, i, o ], [ o, o, o, i, o, i, o, o, i, o, o, o, o, i, i, o, o, i, o ], [ o, i, i, i, o, i, o, i, i, o, i, o, o, i, o, o, o, o, o ], [ o, o, o, i, o, i, o, o, i, o, i, i, i, i, i, i, i, i, i ], [ i, o, o, i, o, i, o, i, i, o, o, o, o, o, o, o, o, o, o ], [ o, o, o, i, o, o, o, o, i, o, o, o, o, o, o, o, o, o, o ] ], [ [ i, i, o, i, o, i, i, i, i, i, o, i, o, i, i, i, i, i, o ], [ o, o, o, i, o, o, o, o, o, o, o, i, o, o, o, o, o, o, o ], [ o, i, i, i, i, i, o, i, o, i, i, i, i, i, o, i, o, i, i ], [ o, o, o, i, o, o, o, i, o, o, o, i, o, o, o, i, o, o, o ], [ i, i, o, i, o, i, i, i, i, i, o, i, o, i, i, i, i, i, o ], [ o, o, o, i, o, o, o, i, o, o, o, i, o, o, o, i, o, o, o ], [ o, i, i, i, i, i, o, i, o, i, i, i, i, i, o, i, o, i, i ], [ o, o, o, i, o, o, o, i, o, o, o, i, o, o, o, i, o, o, o ], [ i, i, o, i, o, i, i, i, i, i, o, i, o, i, i, i, i, i, o ], [ o, o, o, i, o, o, o, i, o, o, o, i, o, o, o, i, o, o, o ], [ o, i, i, i, i, i, o, i, o, i, i, i, i, i, o, i, o, i, i ], [ o, o, o, o, o, o, o, i, o, o, o, o, o, o, o, i, o, o, o ] ], [ [ i, o, o, i, o, o, o, o, o, i, o, o, o, o, o, i, o, o, i ], [ o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o ], [ o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o ], [ i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, i ], [ o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o ], [ o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o ], [ i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, o ], [ o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o ], [ o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o ], [ i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, i ], [ o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o, o, i, o ], [ o, i, o, o, o, o, o, i, o, o, o, o, o, i, o, o, o, o, o ] ] ];
  var gravity = 2.5e-2;
  var getYCoordinateFromMenuOption = function (v) {
      if (v instanceof NewGame) {
          return 24.0;
      };
      if (v instanceof Continue) {
          return 32.0;
      };
      throw new Error("Failed pattern match at Game (line 401, column 1 - line 401, column 53): " + [ v.constructor.name ]);
  };
  var getInputFromKeycode = function (keyCode) {
      if (keyCode === 37) {
          return KeyLeft.value;
      };
      if (keyCode === 38) {
          return KeyUp.value;
      };
      if (keyCode === 39) {
          return KeyRight.value;
      };
      if (keyCode === 40) {
          return KeyDown.value;
      };
      return KeyOther.value;
  };
  var getKeyInput = function (keyCode) {
      var input = getInputFromKeycode(keyCode);
      return function __do() {
          var keypress = Signal_DOM.keyPressed(keyCode)();
          var keyDowns = Signal.filter(Control_Category.identity(Control_Category.categoryFn))(true)(keypress);
          return Signal.flippedMap(Signal.functorSignal)(keyDowns)(function (v) {
              return input;
          });
      };
  };
  var getAnimationFrameInput = function __do() {
      var animationFrames = Signal_DOM.animationFrame();
      return Signal.flippedMap(Signal.functorSignal)(animationFrames)(function (v) {
          return Frame.value;
      });
  };
  var getInputSignal = function __do() {
      var signalLeft = getKeyInput(37)();
      var signalUp = getKeyInput(38)();
      var signalRight = getKeyInput(39)();
      var signalDown = getKeyInput(40)();
      var signalEnter = getKeyInput(13)();
      var signalSpace = getKeyInput(32)();
      var signalFrame = getAnimationFrameInput();
      return Signal.merge(signalLeft)(Signal.merge(signalUp)(Signal.merge(signalRight)(Signal.merge(signalDown)(Signal.merge(signalEnter)(Signal.merge(signalSpace)(signalFrame))))));
  };
  var eqGameState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Startup && y instanceof Startup) {
              return true;
          };
          if (x instanceof Menu && y instanceof Menu) {
              return true;
          };
          if (x instanceof Aim && y instanceof Aim) {
              return true;
          };
          if (x instanceof Launch && y instanceof Launch) {
              return true;
          };
          if (x instanceof Win && y instanceof Win) {
              return true;
          };
          return false;
      };
  });
  var drawWin = function (game) {
      return function __do() {
          Graphics_Canvas.fillText(game.canvasContext)("You Win!")(16.0)(12.0)();
          Graphics_Canvas.fillText(game.canvasContext)("Press any")(4.0)(24.0)();
          Graphics_Canvas.fillText(game.canvasContext)("key to")(4.0)(32.0)();
          Graphics_Canvas.fillText(game.canvasContext)("return to")(4.0)(40.0)();
          return Graphics_Canvas.fillText(game.canvasContext)("menu")(4.0)(48.0)();
      };
  };
  var drawPixel = function (game) {
      return function (x) {
          return function (y) {
              var rectangle = {
                  x: x,
                  y: y,
                  width: 1.0,
                  height: 1.0
              };
              return Graphics_Canvas.fillRect(game.canvasContext)(rectangle);
          };
      };
  };
  var drawMenu = function (game) {
      return function __do() {
          Graphics_Canvas.setFont(game.canvasContext)("8px 'Press Start 2P'")();
          Graphics_Canvas.fillText(game.canvasContext)("MORTLE")(24.0)(12.0)();
          Graphics_Canvas.fillText(game.canvasContext)("New Game")(4.0)(24.0)();
          return Graphics_Canvas.fillText(game.canvasContext)("Continue")(4.0)(32.0)();
      };
  };
  var drawDoor = function (game) {
      var rectangle = {
          x: 90.5,
          y: 55.5,
          width: 4.0,
          height: 4.0
      };
      return function __do() {
          Graphics_Canvas.strokeRect(game.canvasContext)(rectangle)();
          return drawPixel(game)(93.0)(57.0)();
      };
  };
  var drawCell = function (game) {
      return function (y) {
          return function (x) {
              return function (cell) {
                  if (cell) {
                      var rectangle = {
                          x: Data_Int.toNumber(x) * 5.0,
                          y: Data_Int.toNumber(y) * 5.0,
                          width: 5.0,
                          height: 5.0
                      };
                      return Graphics_Canvas.fillRect(game.canvasContext)(rectangle);
                  };
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              };
          };
      };
  };
  var drawRow = function (game) {
      return function (y) {
          return function (row) {
              return Effect.foreachE(Data_Array.mapWithIndex(drawCell(game)(y))(row))(Control_Category.identity(Control_Category.categoryFn));
          };
      };
  };
  var drawLevel = function (game) {
      var maybeLevelData = Data_Array.index(levels)(game.currentLevel);
      if (maybeLevelData instanceof Data_Maybe.Nothing) {
          return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Can't find level " + Data_Show.show(Data_Show.showInt)(game.currentLevel));
      };
      if (maybeLevelData instanceof Data_Maybe.Just) {
          return function __do() {
              Effect.foreachE(Data_Array.mapWithIndex(drawRow(game))(maybeLevelData.value0))(Control_Category.identity(Control_Category.categoryFn))();
              return drawDoor(game)();
          };
      };
      throw new Error("Failed pattern match at Game (line 372, column 3 - line 376, column 20): " + [ maybeLevelData.constructor.name ]);
  };
  var clearScreen = function (game) {
      var rectangle = {
          x: 0.0,
          y: 0.0,
          width: game.width,
          height: game.height
      };
      return Graphics_Canvas.clearRect(game.canvasContext)(rectangle);
  };
  var level = function (game) {
      return function __do() {
          clearScreen(game)();
          drawLevel(game)();
          saveToBackground(game)();
          return clearScreen(game)();
      };
  };
  var menu = function (game) {
      return function __do() {
          clearScreen(game)();
          drawMenu(game)();
          saveToBackground(game)();
          return clearScreen(game)();
      };
  };
  var win = function (game) {
      return function __do() {
          clearScreen(game)();
          drawWin(game)();
          saveToBackground(game)();
          return clearScreen(game)();
      };
  };
  var checkCollision = function (game) {
      return function (x) {
          return function (y) {
              var v = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(levels)(game.currentLevel))(function (levelData) {
                  var x$prime = $$Math.round(x);
                  var y$prime = $$Math.round(y);
                  return Control_Bind.bind(Data_Maybe.bindMaybe)((function () {
                      var $27 = x$prime < 0.0;
                      if ($27) {
                          return Data_Maybe.Nothing.value;
                      };
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(false);
                  })())(function () {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)((function () {
                          var $28 = x$prime >= 95.0;
                          if ($28) {
                              return Data_Maybe.Nothing.value;
                          };
                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(false);
                      })())(function () {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)((function () {
                              var $29 = y$prime < 0.0;
                              if ($29) {
                                  return Data_Maybe.Nothing.value;
                              };
                              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(false);
                          })())(function () {
                              return Control_Bind.bind(Data_Maybe.bindMaybe)((function () {
                                  var $30 = y$prime >= 60.0;
                                  if ($30) {
                                      return Data_Maybe.Nothing.value;
                                  };
                                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(false);
                              })())(function () {
                                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Int.fromNumber($$Math.floor(y$prime / 5.0)))(function (rowInt) {
                                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Int.fromNumber($$Math.floor(x$prime / 5.0)))(function (colInt) {
                                          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(levelData)(rowInt))(function (row) {
                                              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(row)(colInt))(function (cell) {
                                                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(cell);
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
              if (v instanceof Data_Maybe.Nothing) {
                  return true;
              };
              if (v instanceof Data_Maybe.Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Game (line 409, column 27 - line 425, column 26): " + [ v.constructor.name ]);
          };
      };
  };
  var invertPixel = function (game) {
      return function (x) {
          return function (y) {
              var rectangle = {
                  x: x,
                  y: y,
                  width: 1.0,
                  height: 1.0
              };
              var $33 = checkCollision(game)(x)(y);
              if ($33) {
                  return function __do() {
                      Graphics_Canvas.setFillStyle(game.canvasContext)("white")();
                      Graphics_Canvas.fillRect(game.canvasContext)(rectangle)();
                      return Graphics_Canvas.setFillStyle(game.canvasContext)("black")();
                  };
              };
              return Graphics_Canvas.fillRect(game.canvasContext)(rectangle);
          };
      };
  };
  var drawLineCore = function (game) {
      return function (x0) {
          return function (y0) {
              return function (x1) {
                  return function (y1) {
                      return function (dx) {
                          return function (dy) {
                              return function (sx) {
                                  return function (sy) {
                                      return function (err) {
                                          return function __do() {
                                              invertPixel(game)(x0)(y0)();
                                              var $34 = x0 === x1 && y0 === y1;
                                              if ($34) {
                                                  return Data_Unit.unit;
                                              };
                                              var e2 = 2.0 * err;
                                              var x0err = (function () {
                                                  var $35 = e2 > -dy;
                                                  if ($35) {
                                                      return {
                                                          x0: x0 + sx,
                                                          err: err - dy
                                                      };
                                                  };
                                                  return {
                                                      x0: x0,
                                                      err: err
                                                  };
                                              })();
                                              var y0err = (function () {
                                                  var $36 = e2 < dx;
                                                  if ($36) {
                                                      return {
                                                          y0: y0 + sy,
                                                          err: x0err.err + dx
                                                      };
                                                  };
                                                  return {
                                                      y0: y0,
                                                      err: x0err.err
                                                  };
                                              })();
                                              return drawLineCore(game)(x0err.x0)(y0err.y0)(x1)(y1)(dx)(dy)(sx)(sy)(y0err.err)();
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var drawLine = function (game) {
      return function (x0) {
          return function (y0) {
              return function (x1) {
                  return function (y1) {
                      var dx = $$Math.abs(x1 - x0);
                      var dy = $$Math.abs(y1 - y0);
                      var sx = (function () {
                          var $37 = x0 < x1;
                          if ($37) {
                              return 1.0;
                          };
                          return -1.0;
                      })();
                      var sy = (function () {
                          var $38 = y0 < y1;
                          if ($38) {
                              return 1.0;
                          };
                          return -1.0;
                      })();
                      var err = dx - dy;
                      return drawLineCore(game)(x0)(y0)(x1)(y1)(dx)(dy)(sx)(sy)(err);
                  };
              };
          };
      };
  };
  var angleDelta = $$Math.pi / 32.0;
  var airResistance = 0.9756;
  var aimLength = 6.0;
  var display = function (game) {
      if (game.paintScreen) {
          return function __do() {
              (function () {
                  if (game.refreshScreen) {
                      if (game.currentState instanceof Menu) {
                          return menu(game)();
                      };
                      if (game.currentState instanceof Aim) {
                          return level(game)();
                      };
                      if (game.currentState instanceof Win) {
                          return win(game)();
                      };
                      return Data_Unit.unit;
                  };
                  return Data_Unit.unit;
              })();
              if (game.currentState instanceof Menu) {
                  clearScreen(game)();
                  var yCoordinate = getYCoordinateFromMenuOption(game.menuOption);
                  return Graphics_Canvas.fillText(game.canvasContext)("<")(72.0)(yCoordinate)();
              };
              if (game.currentState instanceof Aim) {
                  clearScreen(game)();
                  var rectangle = {
                      x: game.currentX - 1.0,
                      y: game.currentY - 1.0,
                      width: 3.0,
                      height: 3.0
                  };
                  Graphics_Canvas.fillRect(game.canvasContext)(rectangle)();
                  var endX = $$Math.round(game.currentX + aimLength * $$Math.sin(game.aimAngle));
                  var endY = $$Math.round(game.currentY - aimLength * $$Math.cos(game.aimAngle));
                  return drawLine(game)(game.currentX)(game.currentY)(endX)(endY)();
              };
              if (game.currentState instanceof Launch) {
                  clearScreen(game)();
                  var rectangle = {
                      x: $$Math.round(game.currentX),
                      y: $$Math.round(game.currentY),
                      width: 1.0,
                      height: 1.0
                  };
                  return Graphics_Canvas.fillRect(game.canvasContext)(rectangle)();
              };
              return Data_Unit.unit;
          };
      };
      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
  };
  var advanceToNextLevel = function (game) {
      return {
          canvasElement: game.canvasElement,
          canvasContext: game.canvasContext,
          width: game.width,
          height: game.height,
          currentState: game.currentState,
          nextState: (function () {
              var $43 = (game.nextLevel + 1 | 0) >= Data_Array.length(levels);
              if ($43) {
                  return Win.value;
              };
              return Aim.value;
          })(),
          menuOption: game.menuOption,
          refreshScreen: game.refreshScreen,
          paintScreen: game.paintScreen,
          currentLevel: game.currentLevel,
          nextLevel: game.currentLevel + 1 | 0,
          currentX: 2.0,
          currentY: 58.0,
          aimAngle: 0.0,
          velocityX: game.velocityX,
          velocityY: game.velocityY
      };
  };
  var update = function (v) {
      return function (game) {
          if (v instanceof Frame) {
              var refreshScreen = (function () {
                  var $46 = Data_Eq.notEq(eqGameState)(game.currentState)(game.nextState);
                  if ($46) {
                      if (game.nextState instanceof Menu) {
                          return true;
                      };
                      if (game.nextState instanceof Aim) {
                          return game.currentLevel !== game.nextLevel;
                      };
                      if (game.nextState instanceof Win) {
                          return true;
                      };
                      return false;
                  };
                  return false;
              })();
              var game$prime = {
                  paintScreen: true,
                  refreshScreen: refreshScreen,
                  currentState: game.nextState,
                  currentLevel: game.nextLevel,
                  aimAngle: game.aimAngle,
                  canvasContext: game.canvasContext,
                  canvasElement: game.canvasElement,
                  currentX: game.currentX,
                  currentY: game.currentY,
                  height: game.height,
                  menuOption: game.menuOption,
                  nextLevel: game.nextLevel,
                  nextState: game.nextState,
                  velocityX: game.velocityX,
                  velocityY: game.velocityY,
                  width: game.width
              };
              if (game$prime.currentState instanceof Launch) {
                  var $49 = game.currentX >= 90.0 && game.currentY >= 55.0;
                  if ($49) {
                      return advanceToNextLevel(game$prime);
                  };
                  var $50 = checkCollision(game)(game.currentX)(game.currentY + 1.0);
                  if ($50) {
                      return {
                          canvasElement: game$prime.canvasElement,
                          canvasContext: game$prime.canvasContext,
                          width: game$prime.width,
                          height: game$prime.height,
                          currentState: game$prime.currentState,
                          nextState: Aim.value,
                          menuOption: game$prime.menuOption,
                          refreshScreen: game$prime.refreshScreen,
                          paintScreen: game$prime.paintScreen,
                          currentLevel: game$prime.currentLevel,
                          nextLevel: game$prime.nextLevel,
                          currentX: $$Math.round(game.currentX),
                          currentY: $$Math.round(game.currentY - 1.0),
                          aimAngle: game$prime.aimAngle,
                          velocityX: game$prime.velocityX,
                          velocityY: game$prime.velocityY
                      };
                  };
                  var game$prime$prime = (function () {
                      var $51 = checkCollision(game)(game.currentX)(game.currentY - 1.0) && game.velocityY < 0.0;
                      if ($51) {
                          return {
                              velocityX: 0.0,
                              velocityY: 0.0,
                              aimAngle: game$prime.aimAngle,
                              canvasContext: game$prime.canvasContext,
                              canvasElement: game$prime.canvasElement,
                              currentLevel: game$prime.currentLevel,
                              currentState: game$prime.currentState,
                              currentX: game$prime.currentX,
                              currentY: game$prime.currentY,
                              height: game$prime.height,
                              menuOption: game$prime.menuOption,
                              nextLevel: game$prime.nextLevel,
                              nextState: game$prime.nextState,
                              paintScreen: game$prime.paintScreen,
                              refreshScreen: game$prime.refreshScreen,
                              width: game$prime.width
                          };
                      };
                      var $52 = checkCollision(game)(game.currentX - 1.0)(game.currentY) && game.velocityX < 0.0 || checkCollision(game)(game.currentX + 1.0)(game.currentY) && game.velocityX > 0.0;
                      if ($52) {
                          return {
                              velocityX: -game$prime.velocityX,
                              aimAngle: game$prime.aimAngle,
                              canvasContext: game$prime.canvasContext,
                              canvasElement: game$prime.canvasElement,
                              currentLevel: game$prime.currentLevel,
                              currentState: game$prime.currentState,
                              currentX: game$prime.currentX,
                              currentY: game$prime.currentY,
                              height: game$prime.height,
                              menuOption: game$prime.menuOption,
                              nextLevel: game$prime.nextLevel,
                              nextState: game$prime.nextState,
                              paintScreen: game$prime.paintScreen,
                              refreshScreen: game$prime.refreshScreen,
                              velocityY: game$prime.velocityY,
                              width: game$prime.width
                          };
                      };
                      return game$prime;
                  })();
                  return {
                      canvasElement: game$prime$prime.canvasElement,
                      canvasContext: game$prime$prime.canvasContext,
                      width: game$prime$prime.width,
                      height: game$prime$prime.height,
                      currentState: game$prime$prime.currentState,
                      nextState: game$prime$prime.nextState,
                      menuOption: game$prime$prime.menuOption,
                      refreshScreen: game$prime$prime.refreshScreen,
                      paintScreen: game$prime$prime.paintScreen,
                      currentLevel: game$prime$prime.currentLevel,
                      nextLevel: game$prime$prime.nextLevel,
                      currentX: game$prime$prime.currentX + game$prime$prime.velocityX,
                      currentY: game$prime$prime.currentY + game$prime$prime.velocityY,
                      aimAngle: game$prime$prime.aimAngle,
                      velocityX: game$prime$prime.velocityX,
                      velocityY: (game$prime$prime.velocityY + gravity) * airResistance
                  };
              };
              return game$prime;
          };
          var game$prime = {
              paintScreen: false,
              aimAngle: game.aimAngle,
              canvasContext: game.canvasContext,
              canvasElement: game.canvasElement,
              currentLevel: game.currentLevel,
              currentState: game.currentState,
              currentX: game.currentX,
              currentY: game.currentY,
              height: game.height,
              menuOption: game.menuOption,
              nextLevel: game.nextLevel,
              nextState: game.nextState,
              refreshScreen: game.refreshScreen,
              velocityX: game.velocityX,
              velocityY: game.velocityY,
              width: game.width
          };
          if (game.currentState instanceof Menu) {
              if (v instanceof KeyUp) {
                  return {
                      canvasElement: game$prime.canvasElement,
                      canvasContext: game$prime.canvasContext,
                      width: game$prime.width,
                      height: game$prime.height,
                      currentState: game$prime.currentState,
                      nextState: game$prime.nextState,
                      menuOption: NewGame.value,
                      refreshScreen: game$prime.refreshScreen,
                      paintScreen: game$prime.paintScreen,
                      currentLevel: game$prime.currentLevel,
                      nextLevel: game$prime.nextLevel,
                      currentX: game$prime.currentX,
                      currentY: game$prime.currentY,
                      aimAngle: game$prime.aimAngle,
                      velocityX: game$prime.velocityX,
                      velocityY: game$prime.velocityY
                  };
              };
              if (v instanceof KeyDown) {
                  return {
                      canvasElement: game$prime.canvasElement,
                      canvasContext: game$prime.canvasContext,
                      width: game$prime.width,
                      height: game$prime.height,
                      currentState: game$prime.currentState,
                      nextState: game$prime.nextState,
                      menuOption: Continue.value,
                      refreshScreen: game$prime.refreshScreen,
                      paintScreen: game$prime.paintScreen,
                      currentLevel: game$prime.currentLevel,
                      nextLevel: game$prime.nextLevel,
                      currentX: game$prime.currentX,
                      currentY: game$prime.currentY,
                      aimAngle: game$prime.aimAngle,
                      velocityX: game$prime.velocityX,
                      velocityY: game$prime.velocityY
                  };
              };
              if (v instanceof KeyLeft) {
                  return game$prime;
              };
              return {
                  canvasElement: game$prime.canvasElement,
                  canvasContext: game$prime.canvasContext,
                  width: game$prime.width,
                  height: game$prime.height,
                  currentState: game$prime.currentState,
                  nextState: Aim.value,
                  menuOption: game$prime.menuOption,
                  refreshScreen: game$prime.refreshScreen,
                  paintScreen: game$prime.paintScreen,
                  currentLevel: game$prime.currentLevel,
                  nextLevel: 0,
                  currentX: game$prime.currentX,
                  currentY: game$prime.currentY,
                  aimAngle: game$prime.aimAngle,
                  velocityX: game$prime.velocityX,
                  velocityY: game$prime.velocityY
              };
          };
          if (game.currentState instanceof Aim) {
              if (v instanceof KeyLeft) {
                  return {
                      canvasElement: game$prime.canvasElement,
                      canvasContext: game$prime.canvasContext,
                      width: game$prime.width,
                      height: game$prime.height,
                      currentState: game$prime.currentState,
                      nextState: game$prime.nextState,
                      menuOption: game$prime.menuOption,
                      refreshScreen: game$prime.refreshScreen,
                      paintScreen: game$prime.paintScreen,
                      currentLevel: game$prime.currentLevel,
                      nextLevel: game$prime.nextLevel,
                      currentX: game$prime.currentX,
                      currentY: game$prime.currentY,
                      aimAngle: game.aimAngle - angleDelta,
                      velocityX: game$prime.velocityX,
                      velocityY: game$prime.velocityY
                  };
              };
              if (v instanceof KeyRight) {
                  return {
                      canvasElement: game$prime.canvasElement,
                      canvasContext: game$prime.canvasContext,
                      width: game$prime.width,
                      height: game$prime.height,
                      currentState: game$prime.currentState,
                      nextState: game$prime.nextState,
                      menuOption: game$prime.menuOption,
                      refreshScreen: game$prime.refreshScreen,
                      paintScreen: game$prime.paintScreen,
                      currentLevel: game$prime.currentLevel,
                      nextLevel: game$prime.nextLevel,
                      currentX: game$prime.currentX,
                      currentY: game$prime.currentY,
                      aimAngle: game.aimAngle + angleDelta,
                      velocityX: game$prime.velocityX,
                      velocityY: game$prime.velocityY
                  };
              };
              return {
                  canvasElement: game$prime.canvasElement,
                  canvasContext: game$prime.canvasContext,
                  width: game$prime.width,
                  height: game$prime.height,
                  currentState: game$prime.currentState,
                  nextState: Launch.value,
                  menuOption: game$prime.menuOption,
                  refreshScreen: game$prime.refreshScreen,
                  paintScreen: game$prime.paintScreen,
                  currentLevel: game$prime.currentLevel,
                  nextLevel: game$prime.nextLevel,
                  currentX: game$prime.currentX,
                  currentY: game$prime.currentY,
                  aimAngle: game$prime.aimAngle,
                  velocityX: $$Math.sin(game.aimAngle),
                  velocityY: -$$Math.cos(game.aimAngle)
              };
          };
          if (game.currentState instanceof Win) {
              return makeGame(game.canvasElement)(game.canvasContext)(game.width)(game.height);
          };
          return game$prime;
      };
  };
  var mainLoop = function (game) {
      return function __do() {
          var inputSignal = getInputSignal();
          var displaySignal = Signal.foldp(update)(game)(inputSignal);
          return Signal.runSignal(Signal.flippedMap(Signal.functorSignal)(displaySignal)(display))();
      };
  };
  var start = function (canvasElement) {
      return function __do() {
          var context = Graphics_Canvas.getContext2D(canvasElement)();
          var dimensions = Graphics_Canvas.getCanvasDimensions(canvasElement)();
          var game = makeGame(canvasElement)(context)(dimensions.width)(dimensions.height);
          return mainLoop(game)();
      };
  };
  exports["start"] = start;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.load = function (config) {
    return function () {
      WebFont.load(config);
    }
  }
})(PS["WebFontPure"] = PS["WebFontPure"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["WebFontPure"] = $PS["WebFontPure"] || {};
  var exports = $PS["WebFontPure"];
  var $foreign = $PS["WebFontPure"];
  exports["load"] = $foreign.load;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Game = $PS["Game"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var WebFontPure = $PS["WebFontPure"];                
  var waitForWindowLoad = Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Web_HTML.window))(function (window) {
      var windowEventTarget = Web_HTML_Window.toEventTarget(window);
      return Effect_Aff.makeAff(function (listener) {
          return function __do() {
              var newEventListener = Web_Event_EventTarget.eventListener(function (v) {
                  return listener(new Data_Either.Right(Data_Unit.unit));
              })();
              Web_Event_EventTarget.addEventListener("load")(newEventListener)(false)(windowEventTarget)();
              return Effect_Aff.effectCanceler(Web_Event_EventTarget.removeEventListener("load")(newEventListener)(false)(windowEventTarget));
          };
      });
  });
  var loadFont = Effect_Aff.makeAff(function (listener) {
      return function __do() {
          WebFontPure.load({
              google: {
                  families: [ "Press Start 2P" ]
              },
              active: listener(new Data_Either.Right(Data_Unit.unit))
          })();
          return Effect_Aff.nonCanceler;
      };
  });
  var main = Effect_Aff.launchAff_(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(waitForWindowLoad)(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(loadFont)(function () {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
              var maybeCanvasElement = Graphics_Canvas.getCanvasElementById("gameCanvas")();
              if (maybeCanvasElement instanceof Data_Maybe.Nothing) {
                  return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Failed to Load game canvas")();
              };
              if (maybeCanvasElement instanceof Data_Maybe.Just) {
                  return Game.start(maybeCanvasElement.value0)();
              };
              throw new Error("Failed pattern match at Main (line 45, column 5 - line 49, column 33): " + [ maybeCanvasElement.constructor.name ]);
          });
      });
  }));
  exports["waitForWindowLoad"] = waitForWindowLoad;
  exports["loadFont"] = loadFont;
  exports["main"] = main;
})(PS);
PS["Main"].main();